<?xml version="1.0" encoding="iso8859-1"?>
<fpdoc-descriptions>
  <!--
  ====================================================================
    ImageIO
  ====================================================================
-->
  <module name="ImageIO">
    <short>Bilddateien Lesen und Schreiben</short>
    <descr>
      <p>Die Unit 
      <var>ImageIO</var>definiert einige Basisklassen f&#252;r das
      allgemeine Lesen und Schreiben von Bilddateien. Um ein
      spezielles Dateiformat zu unterst&#252;tzen, ist die
      entsprechende Basisklasse abzuleiten.</p>
      <p>Derzeit wird nur das Lesen von Bildern unterst&#252;tzt.
      Die entsprechende Basisklasse hei&#223;t 
      <link id="TImageReader" />. Unterst&#252;tzung f&#252;r das
      Schreiben von vorhandenen Bilddaten in eine Datei oder einen
      Stream wird in einer zuk&#252;nftigen Version
      hinzugef&#252;gt.</p>
      <p>Diese Unit ist weitesgehendst unabh&#228;ngig von anderen
      Paketen. Auch von fpGFX werden nur Deklarationen
      &#252;bernommen, es wird aber kein Code verwendet. Dies
      erm&#246;glicht eine sehr flexible und effiziente Nutzung von
      
      <var>ImageIO</var>f&#252;r allerlei spezielle Anwendungen.
      Komfortfunktionen f&#252;r die Nutzung mit fpGFX sind in der
      Unit 
      <link id="fpImg" />zu finden.</p>
      <p>fpImg ist (c) 2000 Areca Systems GmbH / Sebastian
      G&#252;nther (sg@freepascal.org). Alle Rechte
      vorbehalten.</p>
    </descr>
    <element name="SysUtils">
      <!-- Unit-Verweis -->
      <short>Unterst&#252;tzung f&#252;r 
      <link id="SysUtils.Exception">Exceptions</link></short>
    </element>
    <element name="Classes">
      <!-- Unit-Verweis -->
      <short>Unterst&#252;tzung f&#252;r 
      <link id="Classes.TStream">Streams</link></short>
    </element>
    <element name="GFXBase">
      <!-- Unit-Verweis -->
      <short>Deklarationen f&#252;r 
      <link id="GFXBase.TGfxPixelFormat">Pixelformate</link>und 
      <link id="GFXBase.TGfxPalette">Farbpaletten</link></short>
    </element>
    <!--
  ********************************************************************
    EImgError
  ********************************************************************
-->
    <element name="EImgError">
      <!-- Klasse -->
      <short>Allgemeine Fehler-Exception f&#252;r 
      <var>ImageIO</var></short>
      <descr>Alle speziellen Exceptions, die in 
      <var>ImageIO</var>oder seinen Lese- und Schreibroutinen
      auftreten k&#246;nnen, sind von 
      <var>EImgError</var>abgeleitet. Diese Klasse betrifft
      allerdings nur spezifische Fehlersituationen; allgemeine
      Fehlerbedingungen, wie Schutzverletzungen etc., werden
      &#252;ber die gewohnten Standard-Exceptions gemeldet.</descr>
    </element>
    <!--
  ********************************************************************
    EImgOutOfData
  ********************************************************************
-->
    <element name="EImgOutOfData">
      <!-- Klasse -->
      <short>Zuwenig Daten f&#252;r Bild verf&#252;gbar</short>
      <descr>
        <p>Ein Bild-Lese-Objekt (
        <link id="TImageReader" />) kann diesen Fehler melden, wenn
        es Daten lesen soll, aber keine weiteren Daten zur
        Verf&#252;gung stehen.</p>
        <p>Auf die Anforderung hin, Daten zu lesen, erwartet der
        Leser auch entsprechende Daten. Es ist erforderlich,
        da&#223; mindestens ein Byte an Daten zu lesen ist. Ist
        dies nicht der Fall, wird diese Exception
        ausgel&#246;st.</p>
      </descr>
      <seealso>
        <link id="TImageReader" />
      </seealso>
    </element>
    <element name="EImgOutOfData.Create">
      <!-- Konstruktur -->
      <short>Initialisierung mit passendem Fehlertext</short>
      <descr>Dieser Konstruktur dient nur zur bequemeren
      Programmierung: Er initialisiert die Exception automatisch
      mit dem passenden Fehlertext.</descr>
    </element>
    <!--
  ********************************************************************
    EImgUnsupportedPixelFormat
  ********************************************************************
-->
    <element name="EImgUnsupportedPixelFormat">
      <!-- Klasse -->
      <short>Pixelformat wird nicht unterst&#252;tzt</short>
      <descr>Diese Exception wird von Bildlese- oder Schreibklassen
      ausgel&#246;st, wenn sie mit einem Pixelformat konfrontiert
      werden, welches sie nicht unterst&#252;tzen (Lesen) oder
      nicht unterst&#252;tzen k&#246;nnen (zugrunde liegendes
      Dateiformat kennt das geforderte Pixelformat nicht).</descr>
    </element>
    <element name="EImgUnsupportedPixelFormat.Create">
      <!-- Konstruktur -->
      <short>Initialisierung mit passendem Fehlertext</short>
      <descr>Dieser Konstruktur dient nur zur bequemeren
      Programmierung: Er initialisiert die Exception automatisch
      mit dem passenden Fehlertext.</descr>
    </element>
    <element name="TImageReaderClass">
      <!-- "class of" Typ -->
      <short>Klassentyp f&#252;r 
      <link id="TImageReader" /></short>
      <descr>Diese Typdeklaration definiert einen Namen f&#252;r
      alle Klassen vom Typ 
      <link id="TImageReader" />. Um beispielsweise in einer
      Variable den Typ einer Bildlese-Klasse zu speichern, mu&#223;
      diese Variable einfach als vom Typ 
      <var>TImageReaderClass</var>deklariert werden.</descr>
      <seealso>
      <link id="TImageReader" />.</seealso>
    </element>
    <element name="TImageReaderState">
      <!-- Aufzählungstyp -->
      <short>Zustandswerte f&#252;r 
      <link id="TImageReader">Bildleser</link></short>
      <descr>Dieser Typ z&#228;hlt die verschiedenen m&#246;glichen
      Zust&#228;nde f&#252;r einen 
      <link id="TImageReader">Bildleser</link>auf. W&#228;hrend ein
      Bild eingelesen wird, wird der Zustand an bestimmten Punkten
      um eine Stufe erh&#246;ht.</descr>
      <seealso>
        <link id="TImageReader" />
      </seealso>
    </element>
    <element name="TImageReaderState.irsStart">
      <!-- Aufzählungswert -->
      <short>Leser hat noch nichts getan</short>
    </element>
    <element name="TImageReaderState.irsInHeader">
      <!-- Aufzählungswert -->
      <short>Leser verarbeitet gerade den Header</short>
    </element>
    <element name="TImageReaderState.irsHeaderRead">
      <!-- Aufzählungswert -->
      <short>Leser hat den Header fertig eingelesen</short>
    </element>
    <element name="TImageReaderState.irsInImage">
      <!-- Aufzählungswert -->
      <short>Leser liest gerade die Bilddaten ein</short>
    </element>
    <element name="TImageReaderState.irsFinished">
      <!-- Aufzählungswert -->
      <short>Leser hat seine Arbeit beendet; Header und Bild sind
      komplett eingelesen.</short>
    </element>
    <element name="TSegmentEvent">
      <!-- Prozedur-Typ -->
      <short>'Segment gelesen' Ereignistyp</short>
      <descr>Dieser Typ definiert ein Ereignis, welches besagt,
      da&#223; der Sender ein Bildsegment erfolgreich fertig
      eingelesen hat. Die Argumente 
      <var>StartY</var>und 
      <var>Height</var>geben Auskunft dar&#252;ber, welchen Teil
      des gesamten Bildes das gelesene Segment darstellt.</descr>
      <seealso>
        <link id="TImageReader.OnSegment" />
      </seealso>
    </element>
    <element name="TSegmentEvent.Sender">
      <!-- Argument -->
      <short>Ausl&#246;ser des Ereignisses</short>
    </element>
    <element name="TSegmentEvent.StartY">
      <!-- Argument -->
      <short>Y-Start-Koordinate des Segmentes</short>
    </element>
    <element name="TSegmentEvent.Height">
      <!-- Argument -->
      <short>H&#246;he des Segmentes in Pixel</short>
    </element>
    <!--
  ********************************************************************
    TImageReader
  ********************************************************************
-->
    <element name="TImageReader">
      <!-- Klasse -->
      <short>Basisklasse f&#252;r Bildleser</short>
      <descr>
        <p>Diese Klasse stellt die Basisklasse f&#252;r alle
        Bildleser dar. Wie der Name sagt, ist ein Bildleser eine
        Klasse, welche Bilder (Images) einlesen kann.</p>
        <p>Durch die gemeinsame Basisklasse gibt es eine gemeinsame
        Schnittstelle, so da&#223; verschiedene Leser in
        Anwendungen sehr leicht ausgetauscht werden k&#246;nnen.
        F&#252;r speziellere Anwendungen kann jeder Bildleser
        problemlos weitere F&#228;higkeiten anbieten; hierbei
        entf&#228;llt dann aber der Vorteil der
        Austauschbarkeit.</p>
        <p>Alle Daten werden aus einem 
        <link id="Classes.TStream">Stream-Objekt</link>geladen.
        Eine weitere Besonderheit ist die Anforderung an alle
        Leser, da&#223; sie asynchrones Lesen unterst&#252;tzen
        m&#252;ssen: Der Lesevorgang mu&#223; sich nach einer
        beliebigen Zahl von gelesenen Bytes unterbrechen und zu
        einem sp&#228;teren Zeitpunkt wieder fortf&#252;hren
        lassen.</p>
        <section>
          <title>Der Einlese-Vorgang aus der Sicht von
          au&#223;en</title>
          <p>Die &#228;u&#223;ere Anwendung, welche den Leser
          verwenden will, sollte folgende Dinge beachten:</p>
          <ul>
            <li>
              <p>Zun&#228;chst wird der Header eingelesen. Dazu
              wird solange die Methode 
              <link id="TImageReader.ProcessHeaderData" />aufgerufen,
              bis der Header vollst&#228;ndig eingelesen wurde. Die
              Fertigstellung l&#228;&#223;t sich &#252;ber den
              aktuellen Zustand (
              <link id="TImageReader.State" />) oder &#252;ber ein
              entsprechendes Ereignis (
              <link id="TImageReader.OnHeader" />) pr&#252;fen.</p>
            </li>
            <li>
              <p>Die Anwendung kann nun entscheiden, ob sie die
              eigentlichen Bilddaten lesen will oder nicht. Ein
              Abbrechen an dieser Stelle ist problemlos
              m&#246;glich. Desweiteren k&#246;nnen ab diesem
              Zeitpunkt die Eigenschaften des Bildes &#252;ber die
              entsprechenden Eigenschaften des Objekts abgefragt
              werden.</p>
            </li>
            <li>
              <p>Das Bild selbst kann auf Wunsch in mehreren
              Schritten, sogenannten 
              <em>Segmenten</em>eingelesen werden. Ein Segment ist
              einfach ein vertikaler Abschnitt des Bildes.
              <br />Ein Segment mu&#223; initialisiert werden, und
              zwar zu Beginn des Einlese-Vorgangs und, auf Wunsch,
              nachdem ein einzelnes Segment fertig gelesen wurde.
              Hierzu dient die Methode 
              <link id="TImageReader.SetImageSegmentBuffer" />.
              Bemerkenswert hierbei ist, da&#223; der Aufrufer den
              Speicher f&#252;r das Bild verwaltet.</p>
            </li>
            <li>
              <p>Um herauszufinden, an welcher Stelle das
              n&#228;chste zu lesende Segment liegen wird, sollte
              die Methode 
              <link id="TImageReader.GetImageSegmentStartY" />befragt
              werden. Dies ist nur dann nicht notwendig, falls das
              Bild in nur einem Segment gelesen werden soll - hier
              w&#252;rde immer der Wert "0" zur&#252;ckgeliefert
              werden.</p>
            </li>
            <li>
              <p>Wenn der Leser Bilddaten lesen soll, ist dazu
              einfach die Methode 
              <link id="TImageReader.ProcessImageData" />aufzurufen.
              Diese Methode liest solange Daten, solange welche
              verf&#252;gbar sind oder das Bild fertig eingelesen
              wurde.</p>
            </li>
            <li>
              <p>Sobald ein Segment fertig gelesen wurde, wird das
              Ereignis 
              <link id="TImageReader.OnSegment" />ausgel&#246;st.</p>
            </li>
            <li>
              <p>Wurde das gesamte Bild fertig eingelesen, wird das
              Ereignis 
              <link id="TImageReader.OnImage" />ausgel&#246;st.</p>
            </li>
          </ul>
        </section>
        <section>
          <title>Der Einlese-Vorgang aus der Sicht des
          Lesers</title>
          <p>F&#252;r die Implementierung von abgeleitete Klassen,
          welche ein konkretes Bildformat lesen k&#246;nnen, sind
          folgende Punkte zu beachten:</p>
          <ul>
            <li>
              <p>&#220;blicherweise wird kein neuer 
              <link id="TImageReader.Create">
              Konstruktur</link>ben&#246;tigt. Es spricht zwar auch
              nichts dagegen; aber die Pr&#228;senz eines
              virtuellen Konstruktors in dieser Basisklasse mag
              f&#252;r manchen so erscheinen, als sei dies
              notwendig. Dies ist nicht der Fall.</p>
            </li>
            <li>
              <p>Die Verwaltung des aktuellen Zustandes (
              <link id="TImageReader.State" />) wird bereits
              komplett von der Basisklasse &#252;bernommen</p>
            </li>
            <li>
              <p>Die Methode 
              <link id="TImageReader.DoProcessHeaderData" />mu&#223;
              auf jeden Fall &#252;berschrieben werden; sie dient
              zum Lesen und zur Auswertung des Bild-Headers. Sobald
              der Header fertig eingelesen wurde und die
              entsprechenden Informations-Eigenschaften gesetzt
              wurden, mu&#223; die neue Methode die Methode 
              <link id="TImageReader.HeaderFinished" />aufrufen.</p>
            </li>
            <li>
              <p>Die Methode 
              <link id="TImageReader.DoGetImageSegmentStartY" />mu&#223;
              &#252;berschrieben werden; sie kann vor dem Lesen
              eines Segmentes aufgerufen werden, solange es noch
              Segmente zu lesen gibt.</p>
            </li>
            <li>
              <p>Die Methode 
              <link id="TImageReader.InitImageReading" />kann
              &#252;berschrieben werden, wenn der Bildleser vor
              Beginn des Einlesens der eigentlichen Bilddaten noch
              spezielle Vorbereitungen zu treffen hat.</p>
            </li>
            <li>
              <p>Die Methode 
              <link id="TImageReader.DoProcessHeaderData" />wird in
              abgeleiteten Klassen &#252;berschrieben, um Bilddaten
              einlesen zu k&#246;nnen. Immer dann, wenn ein Segment
              eingelesen wurde, mu&#223; die neue Methode die
              Methode 
              <link id="TImageReader.SegmentFinished" />aufrufen;
              entsprechend mu&#223; 
              <link id="TImageReader.ImageFinished" />aufgerufen
              werden, sobald das Bild vollst&#228;ndig eingelesen
              wurde.</p>
            </li>
          </ul>
        </section>
      </descr>
      <errors>Trifft der Leser im Header auf ein Pixelformat,
      welches er nicht verarbeiten kann, so l&#246;st er eine 
      <link id="EImgUnsupportedPixelFormat" />Exception aus. 
      <br />Wird 
      <link id="TImageReader.ProcessHeaderData" />oder 
      <link id="TImageReader.ProcessImageData" />aufgerufen und es
      k&#246;nnen vom Eingabe-Datenstrom keine Daten gelesen
      werden, so wird die Exception 
      <link id="EImgOutOfData" />ausgel&#246;st.</errors>
    </element>
    <element name="TImageReader.FWidth">
      <!-- Variable -->
      <short>Breite des Bildes</short>
      <descr>Dieses Feld gibt die Breite des Bildes in Pixeln an.
      Es darf nur innerhalb von 
      <link id="TImageReader.DoProcessHeaderData" />gesetzt
      werden.</descr>
      <seealso>
        <link id="TImageReader.Width" />
      </seealso>
    </element>
    <element name="TImageReader.FHeight">
      <!-- Variable -->
      <short>H&#246;he des Bildes</short>
      <descr>Dieses Feld gibt die H&#246;he des Bildes in Pixeln
      an. Es darf nur innerhalb von 
      <link id="TImageReader.DoProcessHeaderData" />gesetzt
      werden.</descr>
      <seealso>
        <link id="TImageReader.Height" />
      </seealso>
    </element>
    <element name="TImageReader.FPixelFormat">
      <!-- Variable -->
      <short>Pixelformat des Bildes</short>
      <descr>Dieses Feld beschreibt das Pixelformat, in welchem die
      Pixeldaten vorliegen. Es darf nur innerhalb von 
      <link id="TImageReader.DoProcessHeaderData" />gesetzt
      werden.</descr>
      <seealso>
        <link id="TImageReader.PixelFormat" />
      </seealso>
    </element>
    <element name="TImageReader.HeaderFinished">
      <!-- Prozedur -->
      <short>Signalisierung: Header fertig eingelesen</short>
      <descr>
        <p>Diese Methode wird von abgeleiteten Klassen aufgerufen,
        sobald diese den Header des Bildes fertig eingelesen und
        verarbeitet haben. Der Zustand des Lesers wird auf 
        <link id="TImageReaderState.irsHeaderFinished" />gesetzt,
        und die Behandlungsroutine des Ereignisses 
        <link id="TImageReader.OnHeader" />wird aufgerufen, falls
        vorhanden.</p>
        <p>
        <var>HeaderFinished</var>darf nur von &#252;berschriebenen
        Methoden von 
        <link id="TImageReader.DoProcessHeaderData" />aufgerufen
        werden; der Leser befindet sich zu diesem Zeitpunkt noch im
        Zustand 
        <link id="TImageReaderState.irsInHeader" />.</p>
      </descr>
      <errors>Nur Debug-Version: Pr&#252;ft per Zusicherung auf
      korrekten Zustand des Lesers.</errors>
      <seealso>
        <link id="TImageReader.ProcessHeaderData" />
        <link id="TImageReader.DoProcessHeaderData" />
      </seealso>
    </element>
    <element name="TImageReader.SegmentFinished">
      <!-- Prozedur -->
      <short>Signalisierung: Bildsegment eingelesen</short>
      <descr>
        <p>Abgeleitete Klassen rufen diese Methode auf, um zu
        signalisieren, da&#223; ein Segment des Bildes fertig
        eingelesen wurde. Falls vorhanden, wird die
        Behandlungsroutine des Ereignisses 
        <link id="TImageReader.OnSegment" />aufgerufen.</p>
        <p>
        <var>SegmentFinished</var>darf nur von &#252;berschriebenen
        Methoden von 
        <link id="TImageReader.DoProcessImageData" />aufgerufen
        werden; der Leser befindet sich zu diesem Zeitpunkt immer
        im Zustand 
        <link id="TImageReaderState.irsInImage" />.</p>
      </descr>
      <errors>Nur Debug-Version: Pr&#252;ft per Zusicherung auf
      korrekten Zustand des Lesers.</errors>
    </element>
    <element name="TImageReader.SegmentFinished.AStartY">
      <!-- Argument -->
      <short>Y-Start-Koordinate des Segmentes</short>
    </element>
    <element name="TImageReader.SegmentFinished.AHeight">
      <!-- Argument -->
      <short>H&#246;he des Segments in Pixel</short>
    </element>
    <element name="TImageReader.ImageFinished">
      <!-- Prozedur -->
      <short>Signalisierung: Bild fertig eingelesen</short>
      <descr>
        <p>Eine abgeleitete Klasse ruft diese Methode auf, um
        anzuzeigen, da&#223; das gesamte Bild nun eingelesen wurde.
        Der Zustand des Lesers wird auf 
        <link id="TImageReaderState.irsFinished" />gesetzt, und die
        Behandlungsroutine f&#252;r das Ereignis 
        <link id="TImageReader.OnImage" />wird aufgerufen, falls
        diese gesetzt ist.</p>
        <p>
        <var>ImageFinished</var>darf nur von &#252;berschriebenen
        Methoden von 
        <link id="TImageReader.DoProcessImageData" />aufgerufen
        werden; der Leser befindet sich zu diesem Zeitpunkt noch im
        Zustand 
        <link id="TImageReaderState.irsInImage" />.</p>
      </descr>
      <errors>Nur Debug-Version: Pr&#252;ft per Zusicherung auf
      korrekten Zustand des Lesers.</errors>
    </element>
    <element name="TImageReader.DoProcessHeaderData">
      <!-- Prozedur -->
      <short>Implementierung: Header-Daten verarbeiten</short>
      <descr>
        <p>Diese virtuelle Methode mu&#223; von abgeleiteten
        Klassen &#252;berschrieben werden, um Header-Daten einlesen
        zu k&#246;nnen.</p>
        <p>Wenn diese Methode aufgerufen wird, steht mindestens ein
        Byte zum Lesen vom angegebenen Stream-Objekt bereit -
        anderenfalls liegt ein Lesefehler vor. Implementierungen
        dieser Methode sollten versuchen, soviel Bytes wie
        m&#246;glich auf einmal zu verarbeiten; sie m&#252;ssen
        aber nach einer beliebigen Anzahl von gelesen Bytes ihre
        Arbeit unterbrechen k&#246;nnen. Solange der aktuelle
        Zustand 
        <link id="TImageReaderState.irsInHeader" />ist, wird der
        Aufrufer diese Methode immer wieder aufrufen, wenn seiner
        Meinung nach neue Daten zur Verf&#252;gung stehen. Achtung,
        diese Methode sollte nicht bereits in den Datenbereich
        hineinlesen, da alle Bildleser nach M&#246;glichkeit den
        Datenstrom rein von vorne nach hinten verarbeiten
        k&#246;nnen sollen, ohne zur&#252;ckzuspringen.</p>
        <p>Sobald der Header fertig eingelesen wurde und die
        Bildeigenschaften dieses Objekts gesetzt wurden, mu&#223; 
        <link id="TImageReader.HeaderFinished" />aufgerufen werden,
        und diese Methode verlassen werden.</p>
      </descr>
      <errors>Kann nicht mindestens ein Byte vom Stream-Objekt
      gelesen werden, so mu&#223; eine 
      <link id="EImgOutOfData" />Exception ausgel&#246;st
      werden.</errors>
      <seealso>
        <link id="TImageReader.ProcessHeaderData" />
      </seealso>
    </element>
    <element name="TImageReader.DoProcessHeaderData.AStream">
      <!-- Argument -->
      <short>Quelle f&#252;r die Header-Daten</short>
    </element>
    <element name="TImageReader.DoGetImageSegmentStartY">
      <!-- Funktion -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.DoGetImageSegmentStartY.Result">
      <!-- Funktionsergebnis -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.DoGetImageSegmentStartY.ASegmentHeight">

      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.InitImageReading">
      <!-- Prozedur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.DoProcessImageData">
      <!-- Prozedur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.DoProcessImageData.AStream">
      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.Create">
      <!-- Konstruktur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.ProcessHeaderData">
      <!-- Prozedur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.ProcessHeaderData.AStream">
      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.GetImageSegmentStartY">
      <!-- Funktion -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.GetImageSegmentStartY.Result">
      <!-- Funktionsergebnis -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.GetImageSegmentStartY.ASegmentHeight">

      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SetImageSegmentBuffer">
      <!-- Prozedur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SetImageSegmentBuffer.AData">
      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SetImageSegmentBuffer.AStride">
      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SetImageSegmentBuffer.ASegmentHeight">

      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.ProcessImageData">
      <!-- Prozedur -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.ProcessImageData.AStream">
      <!-- Argument -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.State">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.Width">
      <!-- Eigenschaft -->
      <short>Breite des Bildes</short>
      <descr>Diese Eigenschaft gibt die Breite des Bildes in Pixeln
      an. Sie wird im Rahmen des Header-Einlesens gesetzt und
      besitzt ab dem Zustand 
      <link id="TImageReaderState.irsHeaderFinished" />einen
      g&#252;ltigen (und endg&#252;ltigen) Wert.</descr>
      <seealso>
        <link id="TImageReader.FWidth" />
      </seealso>
    </element>
    <element name="TImageReader.Height">
      <!-- Eigenschaft -->
      <short>H&#246;he des Bildes</short>
      <descr>Diese Eigenschaft gibt die H&#246;he des Bildes in
      Pixeln an. Sie wird im Rahmen des Header-Einlesens gesetzt
      und besitzt ab dem Zustand 
      <link id="TImageReaderState.irsHeaderFinished" />einen
      g&#252;ltigen (und endg&#252;ltigen) Wert.</descr>
      <seealso>
        <link id="TImageReader.FHeight" />
      </seealso>
    </element>
    <element name="TImageReader.PixelFormat">
      <!-- Eigenschaft -->
      <short>Pixelformat des Bildes</short>
      <descr>Diese Eigenschaft beschreibt das Pixelformat, in
      welchem die Pixeldaten vorliegen. Sie wird im Rahmen des
      Header-Einlesens gesetzt und besitzt ab dem Zustand 
      <link id="TImageReaderState.irsHeaderFinished" />einen
      g&#252;ltigen (und endg&#252;ltigen) Wert.</descr>
      <seealso>
        <link id="GFXBase.TGfxPixelFormat" />
        <link id="TImageReader.FPixelFormat" />
      </seealso>
    </element>
    <element name="TImageReader.SegmentData">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SegmentStride">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SegmentHeight">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.SegmentSize">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.OnHeader">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.OnSegment">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
    <element name="TImageReader.OnImage">
      <!-- Eigenschaft -->
      <short></short>
      <descr></descr>
      <errors></errors>
      <seealso></seealso>
    </element>
  </module>
  <!-- ImageIO -->
</fpdoc-descriptions>
