<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="fpgui">
    <!--
  ====================================================================
    fpGUI
  ====================================================================
-->
    <module name="fpGUI">
      <short>fpGUI is a GUI (graphical user interface) library for Free Pascal</short>
      <descr><printshort id="fpGUI"/>. It is fully object-oriented; its main goal is to provide its services independent of any operating system or graphics environment. All painting is done using fpGFX, while fpGUI provides a comfortable widget set and other high-level classes.</descr>
      <!-- unresolved type reference Visibility: default -->
      <element name="SysUtils">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Classes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="DOM">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GFXBase">
        <short>Base unit from the fpGFX package.</short>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="GFXImpl">
        <short>Abstract unit interfacing to the correct widget set. Part of fpGFX package.</short>
      </element>
      <!-- unresolved type reference Visibility: default -->
      <element name="Contnrs">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "type" alias type Visibility: default -->
      <element name="TColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="InfiniteSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMenu">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWindow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMenuText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clWindowText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clAppWorkSpace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clHighlightText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DFace">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGrayText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBtnText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DHighlight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DDkShadow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="cl3DLight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInfoText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clInfoBk">
        <short/>
        <descr/>
        <seealso/>
      </element>
<!-- constant Visibility: default -->
<element name="clBlack">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clMaroon">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clOlive">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clNavy">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clPurple">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clTeal">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clGray">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clSilver">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clLime">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clFuchsia">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clAqua">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clLtGray">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clDkGray">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clWhite">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBtnFace">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBtnShadow">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBtnHighlight">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clAliceBlue">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clAntiqueWhite">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clAquamarine">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clAzure">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBeige">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBisque">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBlanchedAlmond">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBlueViolet">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBrown">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clBurlyWood">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clCadetBlue">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clChartreuse">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clChocolate">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clLightYellow">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clCornsilk">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clMidnightBlue">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="clDarkWhite">
<short/>
<descr>
</descr>
<seealso>
</seealso>
</element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Yes">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_No">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Ok">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Cancel">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Apply">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Abort">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Retry">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Ignore">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_All">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_NoToAll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_YesToAll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- resource string Visibility: default -->
      <element name="mbText_Help">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomForm"/>
      <!-- set type Visibility: default -->
      <element name="TWidgetState">
        <short>The states a widget can be in.</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsEnabled">
        <short>Is the widget currently enabled or disabled?</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsIsVisible">
        <short>Widget and parents are visible</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsSizeIsForced">
        <short>If the current size has been forced - no auto resizes</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsHasFocus">
        <short>Widget has the input focus</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsMouseInside">
        <short>Mouse cursor is inside this widget</short>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetState.wsClicked">
        <short>User currently clicked on this widget</short>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TOrientation.Horizontal"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TOrientation.Vertical"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TButtonFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TButtonFlags.btnIsEmbedded"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TButtonFlags.btnIsDefault"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TButtonFlags.btnIsPressed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TButtonFlags.btnIsSelected"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TButtonFlags.btnHasFocus"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TCheckboxFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckboxFlags.cbIsPressed"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckboxFlags.cbHasFocus"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckboxFlags.cbIsEnabled"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TCheckboxFlags.cbIsChecked"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TMsgDlgBtn">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbYes"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbNo"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbOK"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbCancel"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbApply"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbAbort"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbRetry"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbIgnore"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbAll"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbNoToAll"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbYesToAll"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TMsgDlgBtn.mbHelp"><short/></element>
      <!-- set type Visibility: default -->
      <element name="TMsgDlgButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TItemFlags">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemFlags.ifFocused"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemFlags.ifSelected"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TItemFlags.ifDeactivated"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TArrowDirection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TArrowDirection.arrowUp"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TArrowDirection.arrowDown"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TArrowDirection.arrowLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TArrowDirection.arrowRight"><short/></element>
      <!-- object Visibility: default -->
      <element name="TStyle">
        <short>The TStyle class is an abstract base class that encapsulates the look and feel of a GUI.</short>
        <descr>fpGUI contains a set of TStyle subclasses that emulate the styles of the
different platforms supported by fpGUI (TWindowsStyle, TMotifStyle, etc.). By default, these styles are built into the fpGUI library. Styles are
preferably applied application wide, but can also be applied per widget.
fpGUI's built-in widgets use TStyle to perform all of their drawing,
ensuring that they look exactly like the equivalent native widgets.</descr>
        <seealso><link id="TDefaultStyle"/></seealso>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TStyle.UIColorCache">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TStyle.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Create.ADisplay"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.UpdateUIColorCache">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetGUIColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetGUIColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetGUIColor.Color"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetUIColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetUIColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetUIColor.AColor"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.SetUIColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.SetUIColor.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.SetUIColor.Color"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawText.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawText.APosition"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawText.AText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawText.State"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawItemBefore">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemBefore.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemBefore.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemBefore.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawItemAfter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemAfter.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemAfter.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawItemAfter.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawWindowBackground">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawWindowBackground.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawWindowBackground.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawButtonFace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawButtonFace.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawButtonFace.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawButtonFace.Flags"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetButtonBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetButtonBorders.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetSeparatorSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetSeparatorSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawSeparator">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawSeparator.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawSeparator.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawSeparator.AOrientation"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawGroupBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawGroupBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawGroupBox.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawGroupBox.ALabel"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawGroupBox.WidgetState"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetGroupBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetGroupBoxBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetGroupBoxBorders.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetGroupBoxBorders.ALabel"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetGroupBoxBorders.LabelWidth"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawEditBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawEditBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawEditBox.ARect"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetEditBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetEditBoxBorders.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawCheckBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawCheckBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawCheckBox.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawCheckBox.LabelRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawCheckBox.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.GetCheckBoxLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetCheckBoxLayout.LabelSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetCheckBoxLayout.TotalSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetCheckBoxLayout.LabelPos"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawRadioButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawRadioButton.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawRadioButton.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawRadioButton.LabelRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawRadioButton.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.GetRadioButtonLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetRadioButtonLayout.LabelSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetRadioButtonLayout.TotalSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetRadioButtonLayout.LabelPos"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetComboBoxArrowSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetComboBoxArrowSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawComboBoxArrow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawComboBoxArrow.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawComboBoxArrow.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawComboBoxArrow.IsPressed"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawComboBoxArrow.IsEnabled"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetScrollBarBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetScrollBarBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetScrollBarBorders.Orientation"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetScrollBarBtnSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetScrollBarBtnSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetScrollBarBtnSize.Orientation"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetScrollBarBtnMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetScrollBarBtnMinSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawScrollBarBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarBorder.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawScrollBarButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarButton.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarButton.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarButton.Direction"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarButton.IsPressed"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBarButton.IsEnabled"><short/></element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetScrollBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetScrollBoxBorders.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawScrollBoxBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBoxBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawScrollBoxBorder.ARect"><short/></element>
      <!-- object Visibility: default -->
      <element name="TDefaultStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TDefaultStyle.ImageCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TDefaultStyle.MaskCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDefaultStyle.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Create.ADisplay"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TDefaultStyle.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.Draw3DFrame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.Color1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.Color2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.Color3"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.Draw3DFrame.Color4"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawFocusRect.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawFocusRect.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawSunkenOuterBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawSunkenOuterBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawSunkenOuterBorder.ARect"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetGUIColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetGUIColor.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetGUIColor.Color"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawText.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawText.APosition"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawText.AText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawText.State"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawItemBefore">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemBefore.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemBefore.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemBefore.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawItemAfter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemAfter.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemAfter.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawItemAfter.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawWindowBackground">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawWindowBackground.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawWindowBackground.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawButtonFace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawButtonFace.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawButtonFace.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawButtonFace.Flags"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetButtonBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetButtonBorders.Result"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetSeparatorSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetSeparatorSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawSeparator">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawSeparator.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawSeparator.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawSeparator.AOrientation"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawGroupBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawGroupBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawGroupBox.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawGroupBox.ALabel"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawGroupBox.WidgetState"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetGroupBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetGroupBoxBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetGroupBoxBorders.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetGroupBoxBorders.ALabel"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetGroupBoxBorders.LabelWidth"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawEditBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawEditBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawEditBox.ARect"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetEditBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetEditBoxBorders.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawCheckBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawCheckBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawCheckBox.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawCheckBox.LabelRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawCheckBox.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.GetCheckBoxLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetCheckBoxLayout.LabelSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetCheckBoxLayout.TotalSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetCheckBoxLayout.LabelPos"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawRadioButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawRadioButton.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawRadioButton.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawRadioButton.LabelRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawRadioButton.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.GetRadioButtonLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetRadioButtonLayout.LabelSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetRadioButtonLayout.TotalSize"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetRadioButtonLayout.LabelPos"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetComboBoxArrowSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetComboBoxArrowSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawComboBoxArrow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawComboBoxArrow.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawComboBoxArrow.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawComboBoxArrow.IsPressed"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawComboBoxArrow.IsEnabled"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetScrollBarBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetScrollBarBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetScrollBarBorders.Orientation"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetScrollBarBtnSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetScrollBarBtnSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetScrollBarBtnSize.Orientation"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetScrollBarBtnMinSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetScrollBarBtnMinSize.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawScrollBarBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarBorder.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawScrollBarButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarButton.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarButton.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarButton.Direction"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarButton.IsPressed"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBarButton.IsEnabled"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetScrollBoxBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetScrollBoxBorders.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDefaultStyle.DrawScrollBoxBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBoxBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.DrawScrollBoxBorder.ARect"><short/></element>
      <!-- object Visibility: default -->
      <element name="TEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TEventObj.RefCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TEventObj.FSender">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TEventObj.Create.ASender"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TEventObj.AddRef">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TEventObj.Release">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TEventObj.SendToChild.AChild"><short/></element>
      <!-- property Visibility: published -->
      <element name="TEventObj.Sender">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- "class of" type Visibility: default -->
      <element name="TEventClass">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLayoutingEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCalcSizesEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TResizedEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TResizedEventObj.FIsForced">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TResizedEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TResizedEventObj.Create.ASender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TResizedEventObj.Create.AIsForced"><short/></element>
      <!-- property Visibility: published -->
      <element name="TResizedEventObj.IsForced">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDestroyEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TEnabledChangeEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TVisibilityChangeEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPaintingEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TPaintingEventObj.FCanvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TPaintingEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPaintingEventObj.Create.ASender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPaintingEventObj.Create.ACanvas"><short/></element>
      <!-- property Visibility: published -->
      <element name="TPaintingEventObj.Canvas">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPreparePaintEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TPreparePaintEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPreparePaintEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPreparePaintEventObj.SendToChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TPaintEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TPaintEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TPaintEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TPaintEventObj.SendToChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TMouseEventObj">        <short>Mouse event</short>
        <descr><printshort id="TMouseEventObj"/>. This is a base event being used by any mouse related events.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMouseEventObj.FShift">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMouseEventObj.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TMouseEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseEventObj.Create.ASender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEventObj.Create.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEventObj.Create.APosition"><short/></element>
      <!-- function Visibility: public -->
      <element name="TMouseEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouseEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseEventObj.SendToChild.AChild"><short/></element>
      <!-- property Visibility: public -->
      <element name="TMouseEventObj.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMouseEventObj.Shift">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouseButtonEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMouseButtonEventObj.FButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TMouseButtonEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseButtonEventObj.Create.ASender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseButtonEventObj.Create.AButton"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseButtonEventObj.Create.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseButtonEventObj.Create.APosition"><short/></element>
      <!-- property Visibility: published -->
      <element name="TMouseButtonEventObj.Button">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMousePressedEventObj">        <short>Mouse button press event</short>
        <descr><printshort id="TMousePressedEventObj"/>. This occurs when one of the mouse buttons are being depressed.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouseReleasedEventObj">        <short>Mouse button release event</short>
        <descr><printshort id="TMouseReleasedEventObj"/>. This occurs when the mouse button was pressed and is now being released.</descr>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouseMoveEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TMouseMoveEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouseMoveEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseMoveEventObj.SendToChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TMouseEnterEventObj">        <short>Mouse enter event</short>
        <descr><printshort id="TMouseEnterEventObj"/>. This occurs when the mouse enters a Window or a Widget.</descr>
      </element>
      <!-- variable Visibility: public -->
      <element name="TMouseEnterEventObj.NewCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouseLeaveEventObj">        <short>Mouse leave event</short>
        <descr><printshort id="TMouseLeaveEventObj"/>. This occurs when the mouse leaves the Window or Widget.</descr>
      </element>
      <!-- function Visibility: public -->
      <element name="TMouseLeaveEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouseLeaveEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseLeaveEventObj.SendToChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TMouseLeaveCheckEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TMouseLeaveCheckEventObj.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMouseLeaveCheckEventObj.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseLeaveCheckEventObj.SendToChild.AChild"><short/></element>
      <!-- variable Visibility: public -->
      <element name="TMouseLeaveCheckEventObj.NewCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMouseWheelEventObj">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMouseWheelEventObj.FWheelDelta">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TMouseWheelEventObj.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEventObj.Create.ASender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEventObj.Create.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEventObj.Create.AWheelDelta"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMouseWheelEventObj.Create.APosition"><short/></element>
      <!-- property Visibility: published -->
      <element name="TMouseWheelEventObj.WheelDelta">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TWidgetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetStyle.wsCaptureMouse"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetStyle.wsClickable"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TWidgetStyle.wsOpaque"><short/></element>
      <!-- object Visibility: default -->
      <element name="TWidget">
        <short>The TWidget class is the base class of all user interface objects.</short>
        <descr>
          <p>Widgets are components that are normally visual and the user can see
them and possibly interact with them at runtime. All widgets have properties,
methods and events that describe aspects of their appearance, such as the
position of the widget, the cursor or hint associated with the widget,
methods to paint or move the widget and events that respond to user
actions.
</p>
          <p>TWidget has many protected properties and methods that are used or
published by its descendants.
</p>
          <p>If you want to use a TWidget to hold child widgets you will probably 
want to add a layout to the parent TWidget.</p>
        </descr>
        <seealso><link id="TLayout"/></seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWidget.FParent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TWidget.FOnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TWidget.SetParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetParent.AParent"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.GetBoundsRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetBoundsRect.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.GetLeft">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetLeft.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.GetTop">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetTop.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.GetWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetWidth.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.GetHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetHeight.Result"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWidget.SetEnabled">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetEnabled.AEnabled"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWidget.SetVisible">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetVisible.AVisible"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvCalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvCalcSizes.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvCalcSizes.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvEnabledChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvEnabledChange.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvEnabledChange.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvVisibilityChange">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvVisibilityChange.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvVisibilityChange.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvMousePressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvMousePressed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvMousePressed.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvMouseReleased">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvMouseReleased.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvMouseReleased.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvMouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvMouseEnter.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvMouseEnter.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvMouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvMouseLeave.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvMouseLeave.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TWidget.EvMouseLeaveCheck">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.EvMouseLeaveCheck.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvMouseLeaveCheck.Event"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FText">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FCanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FCanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FEnabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FVisible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FOrigin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FBoundsSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FClientRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FMinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FMaxSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.FDefSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.WidgetStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TWidget.WidgetState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.SetParentComponent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetParentComponent.AParent"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TWidget.ProcessEvent">
        <short>Processes all incoming event objects</short>
        <descr>
          <p><printshort id="TWidget.ProcessEvent"/>. Inside this event you normally verify the type of event object and pass it to a private event handler method, to do further processing.</p>
          <p>This method gets called before the <var>DistributeEvent</var> method.</p>
        </descr>
        <seealso><link id="TWidget.DistributeEvent"/></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWidget.DistributeEvent">
        <short>Distributes event objects to it's children</short>
        <descr><printshort id="TWidget.DistributeEvent"/>.  This event occurs after the <var>ProcessEvent</var>.</descr>
        <seealso><link id="TWidget.ProcessEvent"/></seealso>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.EvFocusChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.EvKeyPressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvKeyPressed.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvKeyPressed.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.EvKeyReleased">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvKeyReleased.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvKeyReleased.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.EvKeyChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.EvKeyChar.KeyChar"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.EvTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TWidget.DoMouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.DoMouseEnter.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.DoMouseEnter.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.DoMouseEnter.AMousePos"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TWidget.GetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.GetStyle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.SetCanExpandWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetCanExpandWidth.allow"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.SetCanExpandHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetCanExpandHeight.allow"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TWidget.SetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetText.AText"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TWidget.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TWidget.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TWidget.Cursor">
        <short>Specifies the image used to represent the mouse pointer when it passes into the region covered by the widget.</short>
        <descr>Change the value of Cursor to provide feedback to the user when the mouse pointer enters the widget. The value of Cursor is the enumerated type of the cursor in the set of cursors maintained by fpGFX (fpGFXBase unit).</descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TWidget.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TWidget.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TWidget.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TWidget.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TWidget.SendEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.SendEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SendEvent.Event"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWidget.FindForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.FindForm.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.SetEmbeddedParent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetEmbeddedParent.AParent"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.SetBounds">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetBounds.APosition"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetBounds.ASize"><short/></element>
<!-- argument Visibility: default -->
<element name="TWidget.SetBounds.x">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TWidget.SetBounds.y">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TWidget.SetBounds.w">
<short/>
</element>

<!-- argument Visibility: default -->
<element name="TWidget.SetBounds.h">
<short/>
</element>
      <!-- function Visibility: public -->
      <element name="TWidget.WidgetToClient">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.WidgetToClient.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.WidgetToClient.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWidget.ClientToWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.ClientToWidget.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.ClientToWidget.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TWidget.ClientToScreen">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TWidget.ClientToScreen.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.ClientToScreen.APoint"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Show">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Hide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Redraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Redraw">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Redraw.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Scroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Scroll.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Scroll.DeltaX"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TWidget.Scroll.DeltaY"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.SetFocus">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TWidget.Update">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Parent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Origin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.BoundsSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.BoundsRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.MinSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.MaxSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.DefSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.ClientRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Style">
        <short>Sets or Gets the widget's GUI style</short>
        <descr>
          <p>Sets or Gets the widget's GUI style. The ownership of the style object is not transferred.
</p>
          <p>If no style is set, the widget uses the application's style, TApplication.DefaultStyle instead.
</p>
          <p><b>Warning:</b>
This function is particularly useful for demonstration purposes, where you want to show
fpGUI's styling capabilities. Real applications should avoid it and use one consistent GUI style instead.
</p>
        </descr>
        <seealso>
          <link id="TApplication.DefaultStyle"/>
          <link id="TStyle"/>
        </seealso>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Enabled">
        <short>Controls whether the widget responds to mouse, keyboard and timer events.</short>
        <descr>Use Enabled to change the availability of the widget to the user. To
disable a control, set Enabled to false. Disabled controls appear dimmed.
If Enabled is false, the control ignores mouse, keyboard and timer events.</descr>
      </element>
      <!-- property Visibility: public -->
      <element name="TWidget.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TContainerWidget">
        <short>TContainerWidget is an abstract class that defines the interface for containing other widgets</short>
        <descr><printshort id="TContainerWidget"/>
. It also implements the distribution of events to child widgets.  You can't create an instance of this class, as it contains abstract methods, and doesn't actually define internally how to store references to child widgets. It purely defines the interface in doing so. This class is a decendant of
<link id="TWidget">TWidget </link>
 and must be used as a base for container widgets. <link id="TLayout">TLayout </link>
 is an example of a container class that can hold multiple children. <link id="TBinWidget">TBinWidget </link>
 is an example of a container class that can hold only a single child widget - normally a TLayout descendant.</descr>
        <seealso>
          <link id="TWidget"/>
          <link id="TBinWidget"/>
          <link id="TLayout"/>
        </seealso>
      </element>
      <!-- function Visibility: protected -->
      <element name="TContainerWidget.DistributeEvent">
        <short>Distributes <link id="TEventObj">Event objects </link> to all children widgets</short>
        <descr><printshort id="TContainerWidget.DistributeEvent"/>.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TContainerWidget.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.DistributeEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TContainerWidget.GetChildCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TContainerWidget.GetChildCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TContainerWidget.GetChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TContainerWidget.GetChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.GetChild.Index"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TContainerWidget.ChildCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TContainerWidget.Children">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.Children.Index"><short/></element>
      <!-- function Visibility: public -->
      <element name="TContainerWidget.GetChildAt">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TContainerWidget.GetChildAt.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.GetChildAt.APoint"><short/></element>
      <!-- function Visibility: public -->
      <element name="TContainerWidget.ContainsChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TContainerWidget.ContainsChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.ContainsChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TContainerWidget.InsertChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.InsertChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TContainerWidget.RemoveChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TContainerWidget.RemoveChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TBinWidget">
        <short>This is a concrete class that implements all the TContainerWidget's abstract methods</short>
        <descr><printshort id="TBinWidget"/>
. This class adds the ability to contain a single child widget - normally a TLayout descendant.  Examples of such classes are the 
<link id="TForm">TForm </link>
 and <link id="TGroupBox">TGroupBox</link>
.
 For examples of container classes that can hold multiple children, look at <link id="TLayout">TLayout </link>
 and it's descendants.</descr>
        <seealso>
          <link id="TContainerWidget"/>
          <link id="TLayout"/>
          <link id="TGroupBox"/>
          <link id="TForm"/>
        </seealso>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TBinWidget.FChild">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TBinWidget.SetChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBinWidget.SetChild.AChild"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBinWidget.GetChildCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBinWidget.GetChildCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TBinWidget.GetChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBinWidget.GetChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBinWidget.GetChild.Index"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TBinWidget.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TBinWidget.Child">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TBinWidget.ContainsChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TBinWidget.ContainsChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TBinWidget.ContainsChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBinWidget.InsertChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBinWidget.InsertChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TBinWidget.RemoveChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TBinWidget.RemoveChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="ELayoutError">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="THorzAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="THorzAlign.horzLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="THorzAlign.horzCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="THorzAlign.horzRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="THorzAlign.horzFill"><short/></element>
      <!-- enumeration type Visibility: default -->
      <element name="TVertAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TVertAlign.vertTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TVertAlign.vertCenter"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TVertAlign.vertBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TVertAlign.vertFill"><short/></element>
      <!-- object Visibility: default -->
      <element name="TLayoutItem">
        <short>A data class used internall for TBoxLayout</short>
        <descr><printshort id="TLayoutItem"/>. It also serves as the base class for other layout items.</descr>
        <seealso>
          <link id="TGridItem"/>
          <link id="TFixedItem"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TLayoutItem.FWidget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLayoutItem.Widget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- record type Visibility: default -->
      <element name="TWidgetArrayInfo">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TWidgetArrayInfo.min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TWidgetArrayInfo.def">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TWidgetArrayInfo.max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TWidgetArrayInfo.MinFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="TWidgetArrayInfo.MaxFlag">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- array type Visibility: default -->
      <element name="TWidgetArrayInfoArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PWidgetArrayInfoArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLayout">
        <short>The fpGUI layout system provides a simple and powerful way of  specifying the layout of child widgets</short>
        <descr>
          <p><printshort id="TLayout"/>.</p>
          <p>By specifying the logical layout once, you get the following benefits:</p>
          <ul>
            <li>Positioning of child widgets.</li>
            <li>Sensible default sizes for windows.</li>
            <li>Sensible minimum sizes for windows.</li>
            <li>Resize handling.</li>
            <li>
              <p>Automatic update when contents change:</p>
              <ul>
                <li>Font size, text or other contents of child widgets.</li>
                <li>Hiding or showing a child widget.</li>
                <li>Removal of child widgets.</li>
              </ul>
            </li>
          </ul>
        </descr>
        <seealso>
          <link id="TBoxLayout"/>
          <link id="TGridLayout"/>
          <link id="TDockingLayout"/>
          <link id="TFixedLayout"/>
        </seealso>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TLayout.FWidgets">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TLayout.FBorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TLayout.IsRecalcingLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TLayout.GetChildCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TLayout.GetChildCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TLayout.GetChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TLayout.GetChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TLayout.GetChild.Index"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TLayout.AddFixedChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLayout.AddFixedChild.AChild"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TLayout.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TLayout.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TLayout.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TLayout.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TLayout.ContainsChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TLayout.ContainsChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TLayout.ContainsChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TFixedItem">
        <short>A data class used internally for TFixedLayout</short>
        <descr><printshort id="TFixedItem"/>.</descr>
      </element>
      <!-- variable Visibility: public -->
      <element name="TFixedItem.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TFixedItem.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TFixedLayout">
        <short>The TFixedLayout allows you to arrange widgets at set x and y co-ordinates</short>
        <descr><printshort id="TFixedLayout"/>. This is like the current Form Designers of Lazarus and Borland Delphi works.</descr>
        <seealso>
          <link id="TGridLayout"/>
          <link id="TBoxLayout"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TFixedLayout.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TFixedLayout.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFixedLayout.AddWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.AddWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.AddWidget.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.AddWidget.ATop"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TFixedLayout.MoveWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.MoveWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.MoveWidget.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TFixedLayout.MoveWidget.ATop"><short/></element>
      <!-- property Visibility: published -->
      <element name="TFixedLayout.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration type Visibility: default -->
      <element name="TDockingMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmTop"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmBottom"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmLeft"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmRight"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmClient"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TDockingMode.dmUndocked"><short/></element>
      <!-- object Visibility: default -->
      <element name="TDockingItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TDockingItem.Left">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TDockingItem.Top">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: public -->
      <element name="TDockingItem.DockingMode">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TDockingLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDockingLayout.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TDockingLayout.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDockingLayout.AddWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.AddWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.AddWidget.ADockingMode"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TDockingLayout.AddWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.AddWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.AddWidget.ALeft"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDockingLayout.AddWidget.ATop"><short/></element>
      <!-- property Visibility: published -->
      <element name="TDockingLayout.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomBoxLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomBoxLayout.FHorzAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomBoxLayout.FVertAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomBoxLayout.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomBoxLayout.FSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomBoxLayout.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomBoxLayout.SetOrientation.AOrientation"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomBoxLayout.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomBoxLayout.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomBoxLayout.HorzAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomBoxLayout.VertAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomBoxLayout.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomBoxLayout.Spacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomBoxLayout.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomBoxLayout.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomBoxLayout.InsertChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomBoxLayout.InsertChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomBoxLayout.RemoveChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomBoxLayout.RemoveChild.AChild"><short/></element>
      <!-- object Visibility: default -->
      <element name="TBoxLayout">
        <short>Lays out widgets in a horizontal or vertical position.</short>
        <descr>A TBoxLayout lays out widgets in a horizontal row, from left to right, or in a vertical column, from top to bottom.  By default, the TBoxLayout uses the horizontal layout.  You can toggle between horizontal and vertical layouts, by using the Orientation property.</descr>
        <seealso>
          <link id="TBoxLayout"/>
          <link id="TGridLayout"/>
          <link id="TDockingLayout"/>
          <link id="TFixedLayout"/>
        </seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.BorderSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.HorzAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.Orientation">
        <short>Toggle the layout of the TBoxLayout class.</short>
        <descr>Two possible orientations exist - Horizontal (the default) or Vertical.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.Spacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TBoxLayout.VertAlign">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGridItem">
        <short>A data class used internally for TGridLayout</short>
        <descr><printshort id="TGridItem"/>.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridItem.FX">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridItem.FY">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridItem.FWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TGridItem.FHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TGridItem.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGridItem.Create.ACollection"><short/></element>
      <!-- property Visibility: published -->
      <element name="TGridItem.x">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridItem.y">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridItem.Width">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridItem.Height">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGridLayout">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGridLayout.FColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGridLayout.FRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGridLayout.FColSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGridLayout.FRowSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGridLayout.SetColCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.SetColCount.AColCount"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGridLayout.SetRowCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.SetRowCount.ARowCount"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGridLayout.SetColSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.SetColSpacing.AColSpacing"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGridLayout.SetRowSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.SetRowSpacing.ARowSpacing"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGridLayout.InitSizeInfos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.InitSizeInfos.ColInfos"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.InitSizeInfos.RowInfos"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGridLayout.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGridLayout.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGridLayout.GridPositions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGridLayout.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGridLayout.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGridLayout.ColSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGridLayout.RowSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGridLayout.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGridLayout.InsertChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.InsertChild.AChild"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGridLayout.AddWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.AddWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.AddWidget.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.AddWidget.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.AddWidget.w"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.AddWidget.h"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGridLayout.MoveWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.MoveWidget.AWidget"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.MoveWidget.x"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.MoveWidget.y"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.MoveWidget.w"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.MoveWidget.h"><short/></element>
      <!-- object Visibility: default -->
      <element name="TGridLayout">
        <short>The TGridLayout class lays out widgets in a grid.</short>
        <descr>
          <p>TGridLayout takes the space made available to it (by its parent layout
or by the Parent), divides it up into rows and columns, and puts each
widget it manages into the correct cell.
</p>
          <p>Columns and rows behave identically.  A TGridLayout lays out widgets
in a two-dimensional grid. Widgets can also occupy multiple cells.
</p>
          <table width="300" border="1">
            <tr>
              <td>0,0</td>
              <td>0,1</td>
              <td>0,2</td>
            </tr>
            <tr>
              <td>1,0</td>
              <td>1,1</td>
              <td>1,2</td>
            </tr>
            <tr>
              <td>2,0</td>
              <td>2,1</td>
              <td>2,2</td>
            </tr>
          </table>
        </descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.ColSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.RowSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGridLayout.GridPositions">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetAlignment">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetAlignment.AAlignment"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomLabel.FAlignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomLabel.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TLabel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.Alignment">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomEdit">
        <short>Base Edit component with no published properties.</short>
        <seealso><link id="TEdit"/></seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetPasswordChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetPasswordChar.APasswordChar"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetCursorPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetCursorPos.ACursorPos"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomEdit.FPasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomEdit.FCursorPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.EvKeyPressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.EvKeyPressed.Key"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.EvKeyPressed.Shift"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.EvKeyChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.EvKeyChar.KeyChar"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.EvTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.PasswordChar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.CursorPos">
        <short>Position of cursor in the edit widget</short>
        <descr><printshort id="TCustomEdit.CursorPos"/>. If CursorPos = 0 then the
cursor in infront of the first character of text. If CursorPos = 1 then
the cursor is after the first character of text, etc.</descr>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomEdit.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TEdit">
        <short>The TEdit widget is a one-line text editor</short>
        <descr>
          <p><printshort id="TEdit"/>. A TEdit allows the user to enter and edit a single line of plain
text.</p>
          <p>By changing the <link id="TEdit.PasswordChar">PasswordChar</link> property of a
 TEdit, it can also be used as a "write-only" field, for inputs such as passwords.</p>
        </descr>
        <seealso><link id="TEdit.PassworChar"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.PasswordChar">
        <short>Character to use when masking the text input</short>
        <descr><printshort id="TEdit.PasswordChar"/>. The default is ascii char 0, which will then display the
TEdit text as normal. Changing it to any other character, will show the TEdit text masked 
with this character. The most used PasswordChar is the '*' character for password fields.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGenericButton">
        <short>Defines a button that could be embedded in another component.</short>
        <descr>This class defines a button that could be embedded in another component.
	No default minimum size gets applied either.  This is the most basic button you
	can use.  Example of usage: The TScrollbar and TComboBox components use TGenericButtons.</descr>
        <errors/>
        <seealso>
          <link id="TCustomButton"/>
          <link id="TButton"/>
        </seealso>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TGenericButton.FEmbedded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TGenericButton.Paint">
        <short>Draw the blank button face on the canvas.</short>
        <descr>This method draws a blank button face on the canvas. Nothing else gets
	 drawn.  This method also takes into account if the button is Embedded on not, 
	 which will affect the buttons look in some ways. eg: Must it have a Focus Rectangle
	 or not.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGenericButton.Paint.Canvas"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TGenericButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TGenericButton.Create.AOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TGenericButton.Embedded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomButton">
        <short>Used to create new custom type of button components</short>
        <descr>Used to create new custom type of buttons normally used in dialogs and windows. 
There are also no properties published in this component and in has a default
minimum width set to 75 pixels.</descr>
        <seealso>
          <link id="TGenericButton"/>
          <link id="TButton"/>
        </seealso>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.Paint">
        <short>This draws the Text on the already draw button face.</short>
        <descr>This draws the Text on the already draw button face.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomButton.CalcSizes">
        <short>Calculates the size of the button.</short>
        <descr>This method calculates the size of the button and also applies the default
	 minimum size of 75 pixels wide.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TButton">
        <seealso><link id="TCustomButton"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TButton.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TScrollEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollEvent.APosition"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMin">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FMax">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FPosition">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FSmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FLargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.FOnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.ButtonUp">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.ButtonDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.Slider">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomScrollBar.Embedded">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.ButtonUpClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.ButtonUpClick.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.ButtonDownClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.ButtonDownClick.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetOrientation.AOrientation"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMin">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMin.AMin"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetMax">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetMax.AMax"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPageSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPageSize.APageSize"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.SetPosition.APosition"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomScrollBar.GetButtonSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBar.GetButtonSize.Result"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomScrollBar.ClipPosition">
        <short>Resets the Position to its maximum or minimum size</short>
        <descr><printshort id="TCustomScrollBar.ClipPosition"/>. This is a helper
        function used internally. The way it works is as follows. Say the Max Size
        of the scrollbar is 10 and the current Position is 10. Now if the user
        tries to scroll even further, 11 gets passed to the method. The ClipPosition
        sees that 11 is past the Max value, so clips in back to 10. The oposite
        is true for the Min value.</descr>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBar.ClipPosition.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.ClipPosition.APosition"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomScrollBar.UpdateBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomScrollBar.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBar.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBar.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.Min">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.Max">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.Position">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.SmallChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.LargeChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomScrollBar.OnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomScrollBar.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBar.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.LineUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.LineDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.PageUp">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomScrollBar.PageDown">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollBar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Orientation">        <short>The scrollbar orientation</short>
        <descr>This can be either Vertical or Horizontal.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Min">        <short>Minimum position</short>
        <descr>This is the minimum position the the scrollbar can move to.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Max">        <short>Maximum position</short>
        <descr>This is the maximum position the scrollbar can move to.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.PageSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.Position">        <short>Current position of scrollbar</short>
        <descr>This is the current position of the scrollbar.</descr>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.SmallChange">
        <short>Determines how much <link id="TScrollBar.Position">Position</link> 
changes when the user clicks the arrow buttons on the scroll bar or presses the 
arrow keys on the keyboard.</short>
        <descr>
          <p>Set SmallChange to specify how much to change the value of Position 
when the user clicks on the arrow buttons. The Max and Min properties define the 
total range over which Position can vary.</p>
          <p>For example, if Max is 100 and Min is 0, the scroll box can assume 100 
positions. If the SmallChange property setting is 5 and the Position property 
is 0, the user can click the down or right arrow button 20 times before the 
thumb tab is moved all the way to the end of the scroll bar.</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.LargeChange">
        <short>Determines how much <link id="TScrollBar.Position">Position</link>
changes when the user clicks the scroll bar on either side of the thumb tab or 
presses PgUp or PgDn.</short>
        <descr>
          <p>Set LargeChange to specify how much to change the value of 
<link id="TScrollBar.Position">Position</link> when the user clicks on the side 
of the thumb tab (that is, on the 
thumb tab track, but not on the thumb tab itself). The Max and Min properties 
define the total range over which Position can vary.</p>
          <p>For example, if Max is 100 and Min is 0, the scroll box can assume 100 positions.
 If the LargeChange property setting is 20 and the Position property is 0, the 
user can click the scroll bar track five times after the thumb tab before it 
moves all the way to the end of the scroll bar (100 / 20 = 5).</p>
        </descr>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TScrollBar.OnScroll">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollingSupport">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.Parent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FBorders">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FClientRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FVirtualSize">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FHorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FVertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TScrollingSupport.FOnClientRectChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TScrollingSupport.EvMouseWheel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.EvMouseWheel.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.EvMouseWheel.Event"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TScrollingSupport.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.Create.AParent"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TScrollingSupport.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScrollingSupport.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: public -->
      <element name="TScrollingSupport.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.DistributeEvent.Event"><short/></element>
      <!-- function Visibility: public -->
      <element name="TScrollingSupport.SendToChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.SendToChild.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.SendToChild.AChild"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.SendToChild.Event"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingSupport.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingSupport.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TScrollingSupport.CalcClientSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.CalcClientSize.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.CalcClientSize.AHorzBarVisible"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.CalcClientSize.AVertBarVisible"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingSupport.SetVirtualSize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.SetVirtualSize.ASize"><short/></element>
      <!-- function Visibility: public -->
      <element name="TScrollingSupport.ScrollPos">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TScrollingSupport.ScrollPos.Result"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingSupport.DefHorzScrollHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.DefHorzScrollHandler.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.DefHorzScrollHandler.APosition"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TScrollingSupport.DefVertScrollHandler">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.DefVertScrollHandler.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TScrollingSupport.DefVertScrollHandler.APosition"><short/></element>
      <!-- property Visibility: public -->
      <element name="TScrollingSupport.Borders">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScrollingSupport.ClientRect">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScrollingSupport.HorzScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScrollingSupport.VertScrollBar">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TScrollingSupport.OnClientRectChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomScrollBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomScrollBox.ScrollingSupport">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBox.Paint.Canvas"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomScrollBox.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBox.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBox.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomScrollBox.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomScrollBox.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBox.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBox.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomScrollBox.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomScrollBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomScrollBox.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomScrollBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TScrollBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomCheckbox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomCheckbox.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckbox.SetChecked.AChecked"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomCheckbox.FChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomCheckbox.FLabelPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckbox.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckbox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckbox.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomCheckbox.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomCheckbox.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomCheckbox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckbox.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCheckbox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomRadioButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomRadioButton.SetChecked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioButton.SetChecked.AChecked"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomRadioButton.FChecked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomRadioButton.FLabelPos">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioButton.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioButton.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioButton.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomRadioButton.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomRadioButton.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomRadioButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioButton.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TRadioButton">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Checked">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomSeparator">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSeparator.SetOrientation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSeparator.SetOrientation.AOrientation"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomSeparator.SetSpacing">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSeparator.SetSpacing.ASpacing"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomSeparator.FOrientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomSeparator.FSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSeparator.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSeparator.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomSeparator.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomSeparator.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomSeparator.Spacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomSeparator.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomSeparator.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TSeparator">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSeparator.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSeparator.Orientation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TSeparator.Spacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGroupBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGroupBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGroupBox.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGroupBox.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGroupBox.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TGroupBox">
        <short>The TGroupBox widget provides a group box frame with a title</short>
        <descr><printshort id="TGroupBox"/>. TGroupBox doesn't automatically lay out the child widgets (which are often TCheckBoxes or TRadioButtons but can be any widgets).</descr>
        <seealso>
          <link id="TCheckBox"/>
          <link id="TRadioButton"/>
        </seealso>
        <example file="examples/TGroupBox.ex1.pas"/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomListBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FHotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomListBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.EvMousePressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.EvMousePressed.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.EvMousePressed.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.EvMouseReleased">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.EvMouseReleased.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.EvMouseReleased.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.EvMouseMoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.EvMouseMoved.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.EvMouseMoved.Event"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomListBox.ProcessMouseEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ProcessMouseEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ProcessMouseEvent.Event"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomListBox.ScrollingSupport">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomListBox.FMaxItemWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomListBox.ItemHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Paint.Canvas"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomListBox.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomListBox.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.RecalcWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.UpdateScrollBars">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomListBox.RedrawItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.RedrawItem.AIndex"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.HotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomListBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomListBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomListBox.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomListBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TListBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.HotTrack">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomComboBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.ButtonClick">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.ButtonClick.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.DropDownDeactivate">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DropDownDeactivate.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.DropDownDestroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DropDownDestroy.Sender"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomComboBox.FButton">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomComboBox.FDropDown">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomComboBox.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomComboBox.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.DistributeEvent.Event"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomComboBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TComboBox">
        <short>The TComboBox widget is a combined button and popup list.</short>
        <descr>
          <p>A TComboBox provides a means of presenting a list of options to the user in a way 
that takes up the minimum amount of screen space.</p>
          <p>A combobox is a selection widget that displays the current item, and can pop up a 
list of selectable items. A combobox may be editable, allowing the user to modify each 
item in the list.</p>
        </descr>
        <seealso>
          <link id="TRadioButton"/>
          <link id="TEdit"/>
        </seealso>
        <example file="examples/TComboBox.ex1.pas"/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="EInvalidGridOperation">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- set type Visibility: default -->
      <element name="TGridDrawState">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdSelected"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdFocused"><short/></element>
      <!-- enumeration value Visibility: default -->
      <element name="TGridDrawState.gdFixed"><short/></element>
      <!-- pointer type Visibility: default -->
      <element name="PIntegerArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- array type Visibility: default -->
      <element name="TIntegerArray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FRowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FDefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FGridHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FFixedHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomGrid.FRowHeights">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetColCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColCount.AColCount"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRowCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowCount.ARowCount"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFixedCols">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFixedCols.AFixedCols"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetFixedRows">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetFixedRows.AFixedRows"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetDefaultColWidth">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefaultColWidth.AWidth"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetDefaultRowHeight">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetDefaultRowHeight.AHeight"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetColWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetColWidths.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetColWidths.ACol"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetColWidths">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColWidths.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetColWidths.AWidth"><short/></element>
      <!-- function Visibility: private -->
      <element name="TCustomGrid.GetRowHeights">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.GetRowHeights.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.GetRowHeights.ARow"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.SetRowHeights">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowHeights.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SetRowHeights.AHeight"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.HorzScrollBarScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HorzScrollBarScroll.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.HorzScrollBarScroll.APosition"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomGrid.VertScrollBarScroll">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.VertScrollBarScroll.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.VertScrollBarScroll.APosition"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomGrid.ScrollingSupport">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Paint.Canvas"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomGrid.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomGrid.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.ColWidthsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.DrawCell.AState"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.RowHeightsChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomGrid.SizeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SizeChanged.OldColCount"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.SizeChanged.OldRowCount"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.GridHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.FixedHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.DefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.ColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.ColWidths.ACol"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomGrid.RowHeights">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.RowHeights.ARow"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGrid.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGrid.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomGrid.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure type Visibility: default -->
      <element name="TDrawCellEvent">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.Rect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawCellEvent.State"><short/></element>
      <!-- object Visibility: default -->
      <element name="TDrawGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TDrawGrid.FOnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TDrawGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.DrawCell.AState"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDrawGrid.CellRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDrawGrid.CellRect.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.CellRect.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDrawGrid.CellRect.ARow"><short/></element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.ColWidths">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TDrawGrid.RowHeights">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.ColCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.RowCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.FixedCols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.FixedRows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DefaultColWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.DefaultRowHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.OnDrawCell">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- pointer type Visibility: default -->
      <element name="PCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- array type Visibility: default -->
      <element name="TCells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TStringGrid">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TStringGrid.CellStrings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: private -->
      <element name="TStringGrid.GetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStringGrid.GetCells.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetCells.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.GetCells.ARow"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TStringGrid.SetCells">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SetCells.AValue"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.SizeChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SizeChanged.OldColCount"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.SizeChanged.OldRowCount"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TStringGrid.DrawCell">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.ACanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.ARow"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.DrawCell.AState"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TStringGrid.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TStringGrid.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Cells">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cells.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cells.ARow"><short/></element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Cols">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Cols.Index"><short/></element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Objects">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Objects.ACol"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Objects.ARow"><short/></element>
      <!-- property Visibility: public -->
      <element name="TStringGrid.Rows">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStringGrid.Rows.Index"><short/></element>
      <!-- object Visibility: default -->
      <element name="TCustomForm">
        <short>TCustomForm is a base class from which to derive a window such as a form or dialog.</short>
        <descr>Derive from TCustomForm to create a custom window. The TCustomForm
descendant can contain other objects, such as TButton, TCheckBox and 
TComboBox objects, but they have to be placed into a Layout Manager class.</descr>
        <seealso>
          <link id="TBoxLayout"/>
          <link id="TFixedLayout"/>
          <link id="TGridLayout"/>
        </seealso>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FFocusedWidget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FMouseCaptureWidget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FLastSetCursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FWnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FWindowType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomForm.FOnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetFocusedWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetFocusedWidget.AWidget"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.SetMouseCaptureWidget">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetMouseCaptureWidget.AWidget"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndClose">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndClose.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndFocusIn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndFocusIn.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndFocusOut">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndFocusOut.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndHide">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndHide.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndKeyPressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyPressed.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyPressed.AKey"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyPressed.AShift"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndKeyReleased">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyReleased.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyReleased.AKey"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyReleased.AShift"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndKeyChar">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyChar.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndKeyChar.AKeyChar"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseEnter.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseEnter.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseEnter.AMousePos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseLeave.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMouseMoved">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseMoved.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseMoved.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseMoved.AMousePos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMousePressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMousePressed.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMousePressed.AButton"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMousePressed.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMousePressed.AMousePos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMouseReleased">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseReleased.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseReleased.AButton"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseReleased.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseReleased.AMousePos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMouseWheel">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseWheel.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseWheel.AShift"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseWheel.AWheelDelta"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMouseWheel.AMousePos"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndPaint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndPaint.Sender"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndPaint.ARect"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndMove.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndResize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndResize.Sender"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TCustomForm.WndShow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WndShow.Sender"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FBorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FIsActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FResizedByUser">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomForm.FPositionSpecified">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Loaded">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Paint.Canvas"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.WidgetCoords">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.WidgetCoords.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.WidgetCoords.AWidget"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomForm.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomForm.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.ProcessEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.EvTextChanged">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomForm.CreateWnd">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.Cursor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.WindowType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.OnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.OnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomForm.OnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomForm.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TCustomForm.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Show">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.Close">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TCustomForm.SetPosition">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomForm.SetPosition.APosition"><short/></element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.FocusedWidget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.IsActive">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.MouseCaptureWidget">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomForm.Wnd">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TForm">
        <short>A descendant of TCustomForm with published properties</short>
        <descr><printshort id="TForm"/>.</descr>
        <seealso><link id="TCustomForm"/></seealso>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.BorderWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.WindowType">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TCustomStandardDialog">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomStandardDialog.StdBtnClicked">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStandardDialog.StdBtnClicked.Sender"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomStandardDialog.FButtons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomStandardDialog.MainLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomStandardDialog.BtnLayout">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TCustomStandardDialog.Separator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TCustomStandardDialog.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStandardDialog.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomStandardDialog.ProcessEvent.Event"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomStandardDialog.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomStandardDialog.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomStandardDialog.DistributeEvent.Event"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStandardDialog.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStandardDialog.Resized">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomStandardDialog.SetButtons">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStandardDialog.SetButtons.AButtons"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomStandardDialog.Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomStandardDialog.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomStandardDialog.Create.AOwner"><short/></element>
      <!-- object Visibility: default -->
      <element name="TStandardDialog">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStandardDialog.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStandardDialog.OnCreate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TStandardDialog.Buttons">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TApplication">
        <short>The TApplication class manages the GUI application's control flow and main settings</short>
        <descr><printshort id="TApplication"/>. For any GUI application that uses fpGUI, there is precisely
one TApplication object, no matter whether the application has 0, 1, 2 or more windows at
any time.</descr>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FDisplay">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FForms">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TApplication.FDefaultStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TApplication.FTitle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: protected -->
      <element name="TApplication.XMLDoc">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TApplication.GetDefaultStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TApplication.GetDefaultStyle.Result"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TApplication.SetTitle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetTitle.ATitle"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TApplication.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TApplication.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.SetupXMLStreaming">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetupXMLStreaming.AXMLFilename"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.CreateForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.CreateForm.InstanceClass"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TApplication.CreateForm.Reference"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.AddForm">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.AddForm.AForm"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.Run">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Display">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.DefaultStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TApplication.Title">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: default -->
      <element name="Application">
        <short>Global TApplication instance</short>
        <descr><printshort id="Application"/>
 is a object that holds all the different parts
together. It stores the instance variables for the TStyle, TScreen, etc.</descr>
      </element>
      <!-- function Visibility: default -->
      <element name="Min">
        <short>Returns the smallest value of the two</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="Min.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Min.a"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Min.b"><short/></element>
      <!-- function Visibility: default -->
      <element name="Max">
        <short>Returns the greater of two values.</short>
      </element>
      <!-- function result Visibility: default -->
      <element name="Max.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Max.a"><short/></element>
      <!-- argument Visibility: default -->
      <element name="Max.b"><short/></element>
      <!-- function Visibility: default -->
      <element name="ClipMinMax">
        <short>Clip the value until it is between min and max</short>
        <descr><printshort id="ClipMinMax"/>. It is currently used internally in the TScrollBarSlider.EvMouseMove to
limit the amount the user can scroll the scrollbar thumb button.</descr>
      </element>
      <!-- function result Visibility: default -->
      <element name="ClipMinMax.Result">
        <short>the clipped result value</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipMinMax.val">
        <short>value to be tested</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipMinMax.min">
        <short>minimum allowed value</short>
      </element>
      <!-- argument Visibility: default -->
      <element name="ClipMinMax.max">
        <short>maximum allowed value</short>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.Draw3DFrame">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.Color1"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.Color2"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.Color3"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.Draw3DFrame.Color4"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawFocusRect.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawFocusRect.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TStyle.DrawSunkenOuterBorder">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawSunkenOuterBorder.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.DrawSunkenOuterBorder.ARect"><short/></element>
      <!-- object Visibility: default -->
      <element name="TMotifStyle">
        <short>The TMotifStyle class provides Motif look and feel.</short>
        <descr>This class implements the Motif look and feel. It closely resembles the
original Motif look as defined by the Open Group, but with some minor
improvements. The Motif style is fpGUI's default GUI style on Unix platforms.</descr>
        <seealso>
          <link id="TDefaultStyle"/>
          <link id="TStyle"/>
        </seealso>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TMotifStyle.DrawFocusRect">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawFocusRect.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawFocusRect.ARect"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TMotifStyle.DrawButtonFace">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawButtonFace.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawButtonFace.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawButtonFace.Flags"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TMotifStyle.DrawCheckBox">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawCheckBox.Canvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawCheckBox.ARect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawCheckBox.LabelRect"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMotifStyle.DrawCheckBox.Flags"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TWidget.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TWidget.SetStyle.AValue"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomLabel.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.Create.pOwner"><short/></element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelStart">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FSelOffset">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomEdit.SetText">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetText.AText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.Create.pOwner"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TCustomButton.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomButton.Create.pOwner"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckbox.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomCheckbox.Create.pOwner"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioButton.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomRadioButton.Create.pOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TRadioButton.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TCustomGroupBox.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGroupBox.Create.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomGroupBox.Create.pOwner"><short/></element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TGroupBox.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TListBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomComboBox.FOnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomComboBox.SetItemIndex">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomComboBox.SetItemIndex.AValue"><short/></element>
      <!-- variable Visibility: protected -->
      <element name="TCustomComboBox.lbl">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: protected -->
      <element name="TCustomComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TCustomComboBox.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: public -->
      <element name="TCustomComboBox.Items">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.ItemIndex">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TComboBox.OnChange">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TDrawGrid.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TApplication.SetStyle">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TApplication.SetStyle.pNewStyle"><short/></element>
      <!-- object Visibility: default -->
      <element name="TMenuItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TMenuBar">
        <short>A container for TMenuItem objects</short>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TMenuBar.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.Create.AOwner"><short/></element>
      <!-- destructor Visibility: public -->
      <element name="TMenuBar.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TMenuBar.AddMenu">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.AddMenu.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.AddMenu.pTitle"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TMenuItem.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuItem.Create.pTitle"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuItem.Create.pOwner"><short/></element>
<!-- argument Visibility: default -->
<element name="TMenuItem.Create.AOwner">
<short/>
</element>
      <!-- constant Visibility: default -->
      <element name="clRed">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clGreen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clBlue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: public -->
      <element name="TStyle.GetMenuBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TStyle.GetMenuBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetMenuBorders.pCanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetMenuBorders.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TStyle.GetMenuBorders.pTextWidth"><short/></element>
      <!-- function Visibility: public -->
      <element name="TDefaultStyle.GetMenuBorders">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TDefaultStyle.GetMenuBorders.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetMenuBorders.pCanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetMenuBorders.pText"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TDefaultStyle.GetMenuBorders.pTextWidth"><short/></element>
      <!-- variable Visibility: private -->
      <element name="TCustomLabel.FFontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomLabel.SetFontColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomLabel.SetFontColor.AValue"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomLabel.FontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TLabel.FontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TCustomEdit.FFontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.SetFontColor">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.SetFontColor.AValue"><short/></element>
      <!-- property Visibility: protected -->
      <element name="TCustomEdit.FontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TEdit.FontColor">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuItem.FHandler">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuItem.FHotKeyDef">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuItem.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuItem.FSeparator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMenuItem.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- destructor Visibility: public -->
      <element name="TMenuItem.Destroy">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.OnClick">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.Separator">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.HotKeyDef">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.Text">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.Visible">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TMenuItem.Enabled">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuBar.FItems">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuBar.FFocusItem">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TMenuBar.FHorzSpacing">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMenuBar.CalcSizes">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TMenuBar.Paint">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.Paint.Canvas"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMenuBar.VisibleCount">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.VisibleCount.Result"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMenuBar.VisibleItem">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.VisibleItem.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.VisibleItem.idx"><short/></element>
      <!-- procedure Visibility: protected -->
      <element name="TMenuBar.DrawColumn">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DrawColumn.pCanvas"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DrawColumn.col"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DrawColumn.focus"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMenuBar.DistributeEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.DistributeEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DistributeEvent.Event"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.AddMenu.pHotKeyDef"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.AddMenu.pHandlerProc"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TCustomGridLayout.RemoveChild">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomGridLayout.RemoveChild.AChild"><short/></element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDestroy">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnActivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TForm.OnDeactivate">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TPopupWindow">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constructor Visibility: public -->
      <element name="TPopupWindow.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TPopupWindow.Create.AOwner"><short/></element>
      <!-- procedure Visibility: public -->
      <element name="TPopupWindow.Show">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- procedure Visibility: public -->
      <element name="TPopupWindow.Close">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- object Visibility: default -->
      <element name="TComboBoxPopup">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TComboBoxPopup.FListBox">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TComboBoxPopup.ItemSelected">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComboBoxPopup.ItemSelected.Sender"><short/></element>
      <!-- constructor Visibility: public -->
      <element name="TComboBoxPopup.Create">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TComboBoxPopup.Create.AOwner"><short/></element>
      <!-- property Visibility: public -->
      <element name="TComboBoxPopup.ListBox">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: protected -->
      <element name="TCustomComboBox.Click">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clCyan">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clYellow">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMoneyGreen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clSkyBlue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clCream">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMedGray">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clForestGreen">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clRoyalBlue">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- constant Visibility: default -->
      <element name="clMagenta">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- procedure Visibility: private -->
      <element name="TCustomEdit.DoMousePressed">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.DoMousePressed.pEvent"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TCustomEdit.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TCustomEdit.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TCustomEdit.ProcessEvent.Event"><short/></element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.CanExpandHeight">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- property Visibility: published -->
      <element name="TCheckbox.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- variable Visibility: private -->
      <element name="TApplication.FUserStyle">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <!-- function Visibility: protected -->
      <element name="TMenuItem.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuItem.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuItem.ProcessEvent.pEvent"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TMenuBar.DoMouseEnter">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DoMouseEnter.pEvent"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TMenuBar.DoMouseLeave">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DoMouseLeave.pEvent"><short/></element>
      <!-- procedure Visibility: private -->
      <element name="TMenuBar.DoMouseMove">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.DoMouseMove.pEvent"><short/></element>
      <!-- function Visibility: private -->
      <element name="TMenuBar.CalcMouseCol">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.CalcMouseCol.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.CalcMouseCol.x"><short/></element>
      <!-- function Visibility: protected -->
      <element name="TMenuBar.ProcessEvent">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <!-- function result Visibility: default -->
      <element name="TMenuBar.ProcessEvent.Result"><short/></element>
      <!-- argument Visibility: default -->
      <element name="TMenuBar.ProcessEvent.pEvent"><short/></element>
      <!-- property Visibility: published -->
      <element name="TMenuBar.CanExpandWidth">
        <short/>
        <descr/>
        <seealso/>
      </element>
    </module>
    <!-- fpGUI -->
  </package>
</fpdoc-descriptions>
